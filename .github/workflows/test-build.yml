name: E2E and build testing.

# Controls when the action will run. Triggers the workflow on push or pull request
# events but only for the develop and master branches
on:
  pull_request:
    branches: [develop]

# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:
  resolve_dep:
    runs-on: ubuntu-latest
    outputs:
      FACTORY_TAG: ${{ steps.resolve_rep.outputs.FACTORY_TAG }}

    steps:
      - name: Resolve required repositories
        id: resolve_rep
        run: |
          # this assumes the result is an array, and .name property is used
          check_feature() {
            # first param is the branch, everything after is endpoint for curl
            local branch=$1
            local found=0
            shift
            for endpoint in $@; do
              local json=$(curl -s $endpoint)
              local branch_found=$(echo $json | jq -c ".[] | select(.name==\"$branch\") | .name")
              # to track what we found
              >&2 echo "$endpoint -> $branch_found"
              if [[ $branch_found != "" ]]; then
                found=$((found += 1))
              fi
            done
            echo $found
          }

          FACTORY_TAGS=$(check_feature ${{ github.head_ref }} \
            https://registry.hub.docker.com/v1/repositories/dmsc/duo-factory/tags \
            https://api.github.com/repos/UserOfficeProject/user-office-factory/branches
          )

          FACTORY_TAG=develop
          if [[ $FACTORY_TAGS == "2" ]]; then
            FACTORY_TAG="${{ github.head_ref }}"
          fi

          echo ::set-output name=FACTORY_TAG::${FACTORY_TAG}

      - name: Resolved
        run: |
          echo "FACTORY_TAG: ${{ steps.resolve_rep.outputs.FACTORY_TAG }}"

  install-and-cache:
    name: Run install and cache
    needs: resolve_dep
    runs-on: ubuntu-latest

    strategy:
      matrix:
        node-version: [16.x]

    steps:
      - name: Check out Git repository
        uses: actions/checkout@v3

      - name: Set up Node.js
        uses: actions/setup-node@v3
        with:
          node-version: ${{ matrix.node-version }}

      - name: Cache node_modules
        id: cached-node-modules-root
        uses: actions/cache@v3
        with:
          path: node_modules
          key: node-modules-${{ hashFiles('package-lock.json') }}

      - name: Install root dependencies
        if: steps.cached-node-modules-root.outputs.cache-hit != 'true'
        run: npm install

      - name: Cache backend node_modules
        id: cached-node-modules-backend
        uses: actions/cache@v3
        with:
          path: apps/user-office-backend/node_modules
          key: node-modules-${{ hashFiles('apps/user-office-backend/package-lock.json') }}

      - name: Install backend dependencies
        if: steps.cached-node-modules-backend.outputs.cache-hit != 'true'
        run: npm run install:backend

      - name: Cache frontend node_modules
        id: cached-node-modules-frontend
        uses: actions/cache@v3
        with:
          path: apps/user-office-frontend/node_modules
          key: node-modules-${{ hashFiles('apps/user-office-frontend/package-lock.json') }}

      - name: Install frontend dependencies
        if: steps.cached-node-modules-frontend.outputs.cache-hit != 'true'
        run: npm run install:frontend

  build:
    # The type of runner that the job will run on
    runs-on: ubuntu-latest
    needs: [resolve_dep, install-and-cache]

    # Steps represent a sequence of tasks that will be executed as part of the job
    steps:
      - uses: actions/checkout@v3

      - name: Set up Node.js
        uses: actions/setup-node@v3
        with:
          node-version: ${{ matrix.node-version }}

      - name: Restore node_modules
        id: cached-node-modules-root
        uses: actions/cache@v3
        with:
          path: node_modules
          key: node-modules-${{ hashFiles('package-lock.json') }}

      - name: Restore backend node_modules
        id: cached-node-modules-backend
        uses: actions/cache@v3
        with:
          path: apps/user-office-backend/node_modules
          key: node-modules-${{ hashFiles('apps/user-office-backend/package-lock.json') }}

      - name: Restore frontend node_modules
        id: cached-node-modules-frontend
        uses: actions/cache@v3
        with:
          path: apps/user-office-frontend/node_modules
          key: node-modules-${{ hashFiles('apps/user-office-frontend/package-lock.json') }}

      - run: npm run build
        env:
          NODE_ENV: development
          secret: ${{secrets.secret}}
          tokenLife: 7d
          SPARKPOST_TOKEN: wrong_token_for_test

  test_backend:
    runs-on: ubuntu-latest
    needs: [resolve_dep, build]

    steps:
      - uses: actions/checkout@v3

      - name: Set up Node.js
        uses: actions/setup-node@v3
        with:
          node-version: ${{ matrix.node-version }}

      - name: Restore backend node_modules
        id: cached-node-modules-backend
        uses: actions/cache@v3
        with:
          path: apps/user-office-backend/node_modules
          key: node-modules-${{ hashFiles('apps/user-office-backend/package-lock.json') }}

      - name: Run backend unit tests
        env:
          TZ: Europe/Stockholm
          DATE_FORMAT: dd-MM-yyyy
          DATE_TIME_FORMAT: dd-MM-yyyy HH:mm
          DEPENDENCY_CONFIG: ess
          secret: dummysecret
          NODE_ENV: test
          baseURL: localhost:3000
          tokenLife: 7d
          SPARKPOST_TOKEN: dummytoken
          DATABASE_URL: postgres://duouser:duopassword@127.0.0.1:5432/duo
          USER_OFFICE_FACTORY_ENDPOINT: http://localhost:4500/generate
          USER_OFFICE_FACTORY_TAG: ${{ needs.resolve_dep.outputs.FACTORY_TAG }}
          EAM_AUTH_URL: https://ios.esss.lu.se
          EAM_AUTH_SECRET: dummyEAMsecret
          EAM_AUTH_USER: dummyAuthUser
          EAM_AUTH_PASS: dummyAuthPass
          EAM_API_URL: https://ios.esss.lu.se:7443
          EAM_PART_CODE: 12413
        run: |
          REPO_DIR_NAME=$(basename $GITHUB_WORKSPACE)

          npm run test:backend
  e2e:
    runs-on: ubuntu-latest
    needs: [resolve_dep, build]

    strategy:
      fail-fast: false
      matrix:
        pattern:
          [
            'cypress/integration/[a-e]*.ts',
            'cypress/integration/[f-g]*.ts',
            'cypress/integration/[h-i]*.ts',
            'cypress/integration/[j-n]*.ts',
            'cypress/integration/[m-p]*.ts',
            'cypress/integration/[r-s]*.ts',
            'cypress/integration/[t-t]*.ts',
            'cypress/integration/[u-z]*.ts',
            'cypress/integration/[A-Z]*.ts',
          ]

    steps:
      - uses: actions/checkout@v3

      - name: Set up Node.js
        uses: actions/setup-node@v3
        with:
          node-version: ${{ matrix.node-version }}

      - name: Restore node_modules
        id: cached-node-modules-root
        uses: actions/cache@v3
        with:
          path: node_modules
          key: node-modules-${{ hashFiles('package-lock.json') }}

      - name: Restore backend node_modules
        id: cached-node-modules-backend
        uses: actions/cache@v3
        with:
          path: apps/user-office-backend/node_modules
          key: node-modules-${{ hashFiles('apps/user-office-backend/package-lock.json') }}

      - name: Restore frontend node_modules
        id: cached-node-modules-frontend
        uses: actions/cache@v3
        with:
          path: apps/user-office-frontend/node_modules
          key: node-modules-${{ hashFiles('apps/user-office-frontend/package-lock.json') }}

      - name: Cache e2e node_modules
        id: cached-node-modules-e2e
        uses: actions/cache@v3
        with:
          path: apps/user-office-frontend-e2e/node_modules
          key: node-modules-${{ hashFiles('apps/user-office-frontend-e2e/package-lock.json') }}

      - name: Install e2e dependencies
        env:
          CYPRESS_CACHE_FOLDER: ./tmp/Cypress
        if: steps.cached-node-modules-e2e.outputs.cache-hit != 'true'
        run: npm run install:e2e

      - name: Login to GitHub Packages Docker Registry
        uses: docker/login-action@v1
        with:
          registry: docker.pkg.github.com
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Download required repositories
        run: |
          cd "$GITHUB_WORKSPACE/.."
          git clone --depth 1 --branch "${{ needs.resolve_dep.outputs.FACTORY_TAG }}" https://github.com/UserOfficeProject/user-office-factory.git

      - name: Run e2e tests
        env:
          USER_OFFICE_BACKEND_DIR: apps/user-office-backend
          USER_OFFICE_FRONTEND_DIR: apps/user-office-frontend
          USER_OFFICE_FRONTEND_E2E_DIR: apps/user-office-frontend-e2e
          USER_OFFICE_BACKEND: http://localhost:4000/graphql
          USER_OFFICE_ENDPOINT: $USER_OFFICE_BACKEND
          TZ: Europe/Stockholm
          DATE_FORMAT: dd-MM-yyyy
          DATE_TIME_FORMAT: dd-MM-yyyy HH:mm
          DEPENDENCY_CONFIG: ess
          secret: dummysecret
          NODE_ENV: test
          baseURL: localhost:3000
          tokenLife: 7d
          SPARKPOST_TOKEN: dummytoken
          DATABASE_URL: postgres://duouser:duopassword@127.0.0.1:5432/duo
          USER_OFFICE_FACTORY_ENDPOINT: http://localhost:4500/generate
          USER_OFFICE_FACTORY_TAG: ${{ needs.resolve_dep.outputs.FACTORY_TAG }}
          SCHEMA_URL: http://localhost:4000/graphql
          SVC_ACC_TOKEN: ${{ secrets.SVC_ACC_TOKEN }}
          CYPRES_SPEC_PATTERN: ${{ matrix.pattern }}
          BUILD_TAG: ${{ github.sha }}
          CYPRESS_CACHE_FOLDER: ./tmp/Cypress
          EAM_AUTH_URL: https://ios.esss.lu.se
          EAM_AUTH_SECRET: dummyEAMsecret
          EAM_AUTH_USER: dummyAuthUser
          EAM_AUTH_PASS: dummyAuthPass
          EAM_API_URL: https://ios.esss.lu.se:7443
          EAM_PART_CODE: 12413
        run: |
          REPO_DIR_NAME=$(basename $GITHUB_WORKSPACE)

          npm run e2e:after:dev

      - name: Upload cypres screenshots
        if: failure()
        uses: actions/upload-artifact@v3
        with:
          name: cypress-screenshots
          path: apps/user-office-frontend-e2e/cypress/screenshots

  # push:
  #   # The type of runner that the job will run on
  #   runs-on: ubuntu-latest
  #   needs: e2e
  #   # Steps represent a sequence of tasks that will be executed as part of the job
  #   steps:
  #     - name: Load app cache
  #       id: cached-image
  #       uses: actions/cache@v2
  #       with:
  #         path: |
  #           /tmp/.buildx-layer-cache
  #           /tmp/.buildx-image-cache
  #         key: ${{ runner.os }}-buildx-${{ github.head_ref }}-${{ github.sha }}

  #     - name: Fail on cache miss
  #       if: steps.cached-image.outputs.cache-hit != 'true'
  #       run: |
  #         echo "No cache hit!"
  #         exit 1

  #     # For debugging capture the selected branch
  #     - name: Branch
  #       run: echo "Branch ${{ github.head_ref }}"

  #     - name: Load cached app image
  #       run: |
  #         docker load --input /tmp/.buildx-image-cache/img.tar

  #     - name: Login to DockerHub
  #       uses: docker/login-action@v1
  #       with:
  #         username: ${{ secrets.DOCKER_USERNAME }}
  #         password: ${{ secrets.DOCKER_PASSWORD }}

  #     - name: Push
  #       run: |
  #         docker tag user-office-core-monorepo:${{ github.sha }} dmsc/user-office-core-monorepo:${{ github.head_ref }}
  #         docker push dmsc/user-office-core-monorepo:${{ github.head_ref }}
